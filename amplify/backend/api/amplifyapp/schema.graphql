enum Role {
 student,
 graduated,
 technical,
 professor
}

enum Group {
 admin,
 creator,
 viewer
}


type User 
  @model 
  @auth(
    rules: [
      # allow admins to read, create, update and delete user
      { allow: groups, groups: ["admin"], operations: [create, read, update, delete] }
      # allow all authenticated users to view other users' information and create user in DynamoDB
      { allow: private, operations: [read, create] },
    ]
  ) {

  id: ID!
    @auth(rules: [ 
      { allow: private, operations: [read, create, update] }, # Needed to allow update of the image, currentPosition and description fields
      { allow: groups, groups: ["admin"], operations: [create, read, update, delete] }
    ])
  email: AWSEmail!
  emailVerified: Boolean!
  disabled: Boolean! @default(value: "false")
  givenName: String!
  familyName: String!
  image: String
    @auth(rules: [
      { allow: private, operations: [read, create, update] }, #Allow to update only this field
      { allow: groups, groups: ["admin"], operations: [create, read, update, delete] }
    ])
  role: Role @default(value: "student")
  group: Group @default(value: "viewer")
  currentPosition: String 
      @auth(rules: [
      { allow: private, operations: [read, create, update] },
      { allow: groups, groups: ["admin"], operations: [create, read, update, delete] }
    ])
  description: String
      @auth(rules: [
      { allow: private, operations: [read, create, update] },
      { allow: groups, groups: ["admin"], operations: [create, read, update, delete] }
    ])
  ratings: [Rating] @hasMany
  posts: [Post] @hasMany
  ownedChannels: [Channel] @hasMany
  subscriptions: [SubscriptionsSubscribers] @hasMany
  participantChannels: [UsersParticipantChannels] @hasMany
  notifications: [UserNotification] @hasMany

}

type Post
  @model 
  @auth(
    rules: [
      # allow all permissions to admins
      { allow: groups, groups: ["admin"], operations: [create, read, update, delete] },
      # allow creators to only create, read and update posts, NOT DELETE posts
      { allow: groups, groups: ["creator"], operations: [create, read, update] },
      # allow all authenticated users to read posts
      { allow: private, operations: [read] },
    ]
  ) {

  id: ID!
    @auth(rules: [
    { allow: private, operations: [read, update] }, # Needed to allow update of the avgRating
    { allow: groups, groups: ["creator"], operations: [create, read, update] },
    { allow: groups, groups: ["admin"], operations: [create, read, update, delete] }
  ]) 
  name: String!
  topic: String! #In the code a check will be made to ensure that only the topics in the channel can be selected.
  owner: User! @belongsTo
  content: String!
  channel: Channel! @belongsTo
  avgRating: Float! @default(value: "0.0")
    @auth(rules: [
      { allow: private, operations: [read, update] },
      { allow: groups, groups: ["creator"], operations: [create, read, update] },
      { allow: groups, groups: ["admin"], operations: [create, read, update, delete] }
    ])  
  ratings: [Rating] @hasMany
  typePostsByDate: String! @default(value: "PostsByDate") @index(name: "postsByDate", queryField: "postsByDate", sortKeyFields: ["createdAt"])
  typePostsByRating: String! @default(value: "PostsByRating") @index(name: "postsByRating", queryField: "postsByRating", sortKeyFields: ["avgRating"])
  createdAt: String!
}

type Channel
  @model 
  @auth(
    rules: [
      # allow all permissions to admins
      { allow: groups, groups: ["admin"], operations: [create, read, update, delete] },
      # allow admins and creators to read and create
      { allow: groups, groups: ["creator"], operations: [create, read, update] },
      # allow all authenticated users to read channels
      { allow: private, operations: [read] },
    ]
  ) {

  id: ID! 
    @auth(rules: [
      { allow: private, operations: [read, update] }, # Needed to allow update of the avgRating
      { allow: groups, groups: ["creator"], operations: [create, read, update] },
      { allow: groups, groups: ["admin"], operations: [create, read, update, delete] }
    ])  
  name: String!
  topics: [String]!
  disabled: Boolean! @default(value: "false")
  avgRating: Float! @default(value: "0.0") 
    @auth(rules: [
      { allow: private, operations: [read, update] },
      { allow: groups, groups: ["creator"], operations: [create, read, update] },
      { allow: groups, groups: ["admin"], operations: [create, read, update, delete] }
    ])  
  owner: User! @belongsTo
  subscribers: [SubscriptionsSubscribers] @hasMany
  participants: [UsersParticipantChannels] @hasMany
  description: String
  image: String
  posts: [Post] @hasMany
  typeChannelsByDate: String! @default(value: "ChannelsByDate") @index(name: "channelsByDate", queryField: "channelsByDate", sortKeyFields: ["createdAt"])
  typeChannelsByRating: String! @default(value: "ChannelsByRating") @index(name: "channelsByRating", queryField: "channelsByRating", sortKeyFields: ["avgRating"])
  createdAt: String!
  notifications: [ChannelNotification] @hasMany
}


type SubscriptionsSubscribers
  @model 
  @auth(
    rules: [
      # allow all permissions to admins
      { allow: groups, groups: ["admin"], operations: [create, read, update, delete] },
      # any authenticated user can read, create and update subscriptions
      { allow: private, operations: [create, read, update, delete] }

    ]
  ) {
    id: ID!
    channel: Channel! @belongsTo
    user: User! @belongsTo
}


type UsersParticipantChannels
  @model 
  @auth(
    rules: [
      # allow admins and creators to read and create
      { allow: groups, groups: ["admin", "creator"], operations: [create, read, update, delete] },
      # allow all authenticated users to read channels
      { allow: private, operations: [read] },
    ]
  ) {
    id: ID!
    channel: Channel! @belongsTo
    user: User! @belongsTo
}

type Rating 
  @model 
  @auth(
    rules: [
      # allow all permissions to admins
      { allow: groups, groups: ["admin"], operations: [create, read, update, delete] },
      # allow all authenticated users to read, create and update ratings
      { allow: private, operations: [create, read, update] },
    ]
  ) {

  id: ID!
  user: User! @belongsTo
  post: Post! @belongsTo
  stars: Float!
}

type ChannelNotification
  @model 
  @auth(
    rules: [
      # allow all permissions to admins
      { allow: groups, groups: ["admin"], operations: [create, read, update, delete] },
      # allow creators to read and create
      { allow: groups, groups: ["creator"], operations: [create, read] },
      # allow all authenticated users to read posts
      { allow: private, operations: [read] },
    ]
  ) {

  id: ID!
  channel: Channel! @belongsTo
  type: String!
  message: String!
  typeChannelNotificationsByDate: String! @default(value: "ChannelNotificationsByDate") 
    @index(name: "channelNotificationsByDate", queryField: "channelNotificationsByDate", sortKeyFields: ["createdAt"])
  createdAt: String!
}


type UserNotification
  @model 
  @auth(
    rules: [
      # allow all permissions to admins
      { allow: groups, groups: ["admin"], operations: [create, read, update, delete] },
      # allow all authenticated to read and create user notifications
      { allow: private, operations: [create, read] },
    ]
  ) {

  id: ID!
  user: User! @belongsTo
  type: String!
  message: String!
  channelID: ID!
  channelName: String!
  typeUserNotificationsByDate: String! @default(value: "UserNotificationsByDate") 
    @index(name: "userNotificationsByDate", queryField: "userNotificationsByDate", sortKeyFields: ["createdAt"])
  createdAt: String!
}


# only admin group can call changeUsergroup and changeUserStatus
type Mutation {
  changeUserGroup(id: ID!, group: Group!): String @function(name: "changeUserGroup-${env}") 
    @auth(rules: [{ allow: groups, groups: ["admin"] }]),
  changeUserStatus(id: ID!, disable: Boolean!): String @function(name: "changeUserStatus-${env}") 
    @auth(rules: [{ allow: groups, groups: ["admin"] }]),
}
