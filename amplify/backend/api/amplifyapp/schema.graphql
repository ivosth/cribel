# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
# input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

#union Subscribable = Channel | User

enum Role {
 student,
 graduated,
 technical,
 professor
}

enum Group {
 admin,
 creator,
 viewer
}


type User 
  @model 
  @auth(
    rules: [
      # allow admins to create, update and delete user
      { allow: groups, groups: ["admin"] },
      # allow ownner to create, update and delete user
      { allow: owner },
      # allow all authenticated users to view other users' information
      { allow: private, operations: [read] },
      # allow non authenticated users to create an user
      { allow: public, operations: [create], provider: iam }
    ]
  ) {

  id: ID!
  email: AWSEmail!
  emailVerified: Boolean!
  disabled: Boolean! @default(value: "false")
  givenName: String!
  familyName: String!
  image: String
  role: Role @default(value: "student")
  group: Group @default(value: "admin")
  currentPosition: String 
  description: String
  ratings: [Rating] @hasMany
  posts: [Post] @hasMany
  ownedChannels: [Channel] @hasMany
  subscriptions: [Channel] @manyToMany(relationName: "SubscriptionsSubscribers")
  participantChannels: [Channel] @manyToMany(relationName: "UsersParticipantChannels")
  notifications: [UserNotification] @hasMany

  #To prevent an owner from reassigning their record to another user https://docs.amplify.aws/cli/graphql/authorization-rules/#per-user--owner-based-data-access
  #owner: String @auth(rules: [{ allow: owner, operations: [read, delete] }])

}

type Post @model @auth(rules: [{ allow: groups, groups: ["admin"] }]){
  id: ID!
  name: String!
  topic: String! #In the code a check will be made to ensure that only the topics in the channel can be selected.
  #A @hasOne relationship always uses a reference to the primary key of the related model, by default id.
  owner: User! @belongsTo #(fields: ["userID"]) # field to be used for storing the relationship information
  content: String!
  channel: Channel! @belongsTo
  avgRating: Float! @default(value: "0.0")
  ratings: [Rating] @hasMany #@default(value: "0.0") #The value parameter must be formatted as a string regardless of the corresponding field type
  # https://github.com/trek10inc/graphql-default-value-transformer
  # https://docs.amplify.aws/guides/api-graphql/query-with-sorting/q/platform/js/#overview
  typePostsByDate: String! @default(value: "PostsByDate") @index(name: "postsByDate", queryField: "postsByDate", sortKeyFields: ["createdAt"])
  typePostsByRating: String! @default(value: "PostsByRating") @index(name: "postsByRating", queryField: "postsByRating", sortKeyFields: ["avgRating"])
  createdAt: String!
}

type Channel @model @auth(rules: [{ allow: groups, groups: ["admin"] }]){
  id: ID!
  name: String!
  topics: [String]!
  disabled: Boolean! @default(value: "false")
  avgRating: Float! @default(value: "0.0")
  owner: User! @belongsTo
  subscribers: [User] @manyToMany(relationName: "SubscriptionsSubscribers")
  participants: [User] @manyToMany(relationName: "UsersParticipantChannels")
  description: String
  image: String
  posts: [Post] @hasMany
  typeChannelsByDate: String! @default(value: "ChannelsByDate") @index(name: "channelsByDate", queryField: "channelsByDate", sortKeyFields: ["createdAt"])
  typeChannelsByRating: String! @default(value: "ChannelsByRating") @index(name: "channelsByRating", queryField: "channelsByRating", sortKeyFields: ["avgRating"])
  createdAt: String!
  notifications: [ChannelNotification] @hasMany
}

type Rating @model @auth(rules: [{ allow: groups, groups: ["admin"] }]){
  id: ID!
  user: User! @belongsTo
  post: Post! @belongsTo
  stars: Float!
}

type ChannelNotification @model @auth(rules: [{ allow: groups, groups: ["admin"] }]){
  id: ID!
  channel: Channel! @belongsTo
  message: String!
  typeChannelNotificationsByDate: String! @default(value: "ChannelNotificationsByDate") 
    @index(name: "channelNotificationsByDate", queryField: "channelNotificationsByDate", sortKeyFields: ["createdAt"])
  createdAt: String!
}


type UserNotification @model @auth(rules: [{ allow: groups, groups: ["admin"] }]){
  id: ID!
  user: User! @belongsTo
  message: String!
  viewed: Boolean! @default(value: "false")
  typeUserNotificationsByDate: String! @default(value: "UserNotificationsByDate") 
    @index(name: "userNotificationsByDate", queryField: "userNotificationsByDate", sortKeyFields: ["createdAt"])
  createdAt: String!
}



type Mutation {
  changeUserGroup(id: ID!, group: Group!): String @function(name: "changeUserGroup-${env}"),
  changeUserStatus(id: ID!, disable: Boolean!): String @function(name: "changeUserStatus-${env}")
}
